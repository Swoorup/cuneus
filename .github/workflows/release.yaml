name: Shader Binary Release

on:
  push:
    tags:
      - 'v*'

permissions: write-all

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            archive_cmd: "tar -czf"
            archive_ext: ".tar.gz"
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            ext: ".exe"
            archive_cmd: "7z a -tzip"
            archive_ext: ".zip"
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
            archive_cmd: "tar -czf"
            archive_ext: ".tar.gz"

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install required dependencies for Linux
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libudev-dev

      # Build the binary
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bin droste

      # Create release directory structure and copy files
      - name: Prepare release package
        shell: bash
        run: |
          # Create directory structure
          mkdir -p release/droste/shaders
          
          # Copy the binary
          cp "target/release/droste${{ matrix.ext }}" "release/droste/"
          
          # Copy shader files
          cp shaders/droste.wgsl release/droste/shaders/
          cp shaders/vertex.wgsl release/droste/shaders/
          
          # Create a README file
          echo "Droste Shader" > release/droste/README.txt
          echo "Please ensure the 'shaders' directory remains in the same folder as the executable." >> release/droste/README.txt
          
          # Windows-specific: create .bat launcher
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "@echo off" > release/droste/run_droste.bat
            echo "if not exist shaders mkdir shaders" >> release/droste/run_droste.bat
            echo "droste.exe" >> release/droste/run_droste.bat
          fi

      # Create archive
      - name: Create archive
        shell: bash
        run: |
          cd release
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a "../droste-${{ matrix.target }}${{ matrix.archive_ext }}" droste
          else
            tar -czf "../droste-${{ matrix.target }}${{ matrix.archive_ext }}" droste
          fi

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: droste-${{ matrix.target }}
          path: droste-${{ matrix.target }}${{ matrix.archive_ext }}

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          generate_release_notes: true