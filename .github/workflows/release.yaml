name: Shader Binary Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  discussions: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: droste-linux
            asset_name: droste-linux-x86_64.tar.gz
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: droste-windows
            asset_name: droste-windows-x86_64.zip
            
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: droste-macos
            asset_name: droste-macos-x86_64.tar.gz

    steps:
      - uses: actions/checkout@v4

      - name: Verify shader files
        shell: bash
        run: |
          echo "Current directory structure:"
          ls -R
          echo "Checking shader files:"
          test -f "shaders/vertex.wgsl" && echo "vertex.wgsl found" || echo "vertex.wgsl not found"
          test -f "shaders/droste.wgsl" && echo "droste.wgsl found" || echo "droste.wgsl not found"

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-xfixes0-dev libxcb-shape0-dev libxcb1-dev libvulkan-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Create required directories
        shell: bash
        run: |
          mkdir -p shaders
          cp src/shaders/* shaders/ || true
          echo "Shader directory contents:"
          ls -la shaders/

      - name: Build binary
        run: cargo build --release --bin droste
        env:
          RUST_BACKTRACE: 1

      - name: Prepare release package (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release/bin release/shaders
          cp target/release/droste release/bin/
          cp shaders/* release/shaders/
          tar czf ${{ matrix.asset_name }} -C release .

      - name: Prepare release package (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p release/bin release/shaders
          cp target/release/droste.exe release/bin/
          cp shaders/* release/shaders/
          7z a ${{ matrix.asset_name }} ./release/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_name }}
          compression-level: 0

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
